#!/usr/bin/env python

"""
rezrxt-ls
    list components of a resolve (rxt) database.
"""

from os.path import isdir, realpath
from os import environ
import argparse
import json
from pprint import pprint

from rezrxt.filebacked import reader
from rezrxt.timeutils import epoc_to_gm_asctime, epoc_to_loc_asctime

def pretty(jdata):
    """
    Selectively print information from resolve.
    """
    print "package requests"
    for val in jdata["package_requests"]:
        print "\t{0}".format(val)
    print ""
    print "user@host"
    print "\t{0}@{1}".format(jdata["user"], jdata["host"])
    print ""
    print "timestamp"
    t_stamp = jdata["timestamp"]
    print "\t{0} | GMT {1} | LOCAL {2} ".format(t_stamp,
                                                epoc_to_gm_asctime(t_stamp),
                                                epoc_to_loc_asctime(t_stamp))
    print ""
    print "implicit packages"
    for val in jdata["implicit_packages"]:
        print "\t{0}".format(val)
    print ""
    print "resolved packages"
    for val in jdata["resolved_packages"]:
        val2 = val["variables"]
        print "\t{0}-{1} \t( {2} )".format(val2["name"], val2["version"], val2["location"])
def main():
    """
    Main entry point
    """
    parser = argparse.ArgumentParser(usage="Usage: rezrxt-ls [options] [context [name [timestamp]]]",
                                     description='list components in the rez rxt database.')
    parser.add_argument('cmdargs', nargs='*',
                        help='list contexts')
    parser.add_argument('-g', '--gmt', dest="gmt", action="store_true",
                        help="Report timestamps in gmt time.")
    parser.add_argument('-l', '--loc', dest="loc", action="store_true",
                        help="Report timestamps in local time.")

    parser.add_argument('-d', '--db', dest='database',
                        help='Optionally provide a path to the root database directory.')
    parser.add_argument('-a', '--approximate', dest="approx", action="store_true",
                        help="In conjunction with -r, find the rxt with the approximate timestmap.")
    parser.add_argument('-f', '--file', dest="file", action="store_true",
                        help="print file instead of contents")
    parser.add_argument('-p', '--pretty', dest='pretty', action='store_true',
                        help="In conjuntion with -r, pretty print the results.")
    args = parser.parse_args()

    db_root = args.database or environ.get("REZTXT_DB_ROOT")

    if db_root is None:
        print parser.usage
        exit(0)
    else:
        db_root = realpath(db_root)

    if not isdir(db_root):
        print parser.usage
        print "\nfile \"{0}\" is not an directory\n".format(db_root)
        exit(0)

    try:
        db_reader = reader.RezRxtDbReader(db_root)
    except RuntimeError, err:
        print err
        exit(0)

    if len(args.cmdargs) == 0:
        for ctx in db_reader.contexts():
            print ctx
        exit(0)

    if len(args.cmdargs) == 1:
        for name in db_reader.names(args.cmdargs[0]):
            print name
        exit(0)


    if len(args.cmdargs) == 2:
        for t_stamp in db_reader.timestamps(args.cmdargs[0], args.cmdargs[1]):
            print epoc_to_gm_asctime(t_stamp) if args.gmt else (\
                epoc_to_loc_asctime(t_stamp) if args.loc else t_stamp)
        exit(0)

    try:
        if len(args.cmdargs) == 3:
            if args.file:
                print db_reader.resolve(args.cmdargs[0], args.cmdargs[1], args.cmdargs[2],
                                        approximate=True if args.approx else False)
            else:
                rxt_f = db_reader.resolve(args.cmdargs[0], args.cmdargs[1], args.cmdargs[2],
                                          approximate=True if args.approx else False)

                with open(rxt_f) as data_file:
                    data = json.load(data_file)
                if args.pretty:
                    pretty(data)
                else:
                    pprint(data)
    except KeyError, err:
        print err
        print "Have you tried using the \"--approximate\" flag?"
    exit(0)

    print parser.usage

if __name__ == "__main__":
    main()
